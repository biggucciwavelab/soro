#-------------------------------------------------------------------------------
# Name:        	run_jameba.py
# Purpose:	Modular combined controller for JAMEBA
#
# Author:      	Qiyuan Zhou
#-------------------------------------------------------------------------------
#!/usr/bin/env python



import os
import math
import time
import sys, getopt
import pychrono as chrono
import pychrono.postprocess as postprocess
import pychrono.irrlicht as chronoirr
import numpy as np
import matplotlib.pyplot as plt
from diff_jameba_objects import *

# ---------------------------------------------------------------------
#
# Parse command-line parameters

m_filename = "jameba2.py"
m_timestep = 0.001
m_length = 1.0

m_datapath = "C:/Users/dmulr/OneDrive/Documents/data/"
		
chrono.SetChronoDataPath(m_datapath)

print ("  file to load is ", m_filename)
print ("  timestep is ", m_timestep)
print ("  length is ", m_length)
print ("  data path for fonts etc.: ", m_datapath)


# ---------------------------------------------------------------------
#
#  load the file generated by the SolidWorks CAD plugin
#  and add it to the ChSystem.
#

# Remove the trailing .py and add / in case of file without ./
m_absfilename = os.path.abspath(m_filename)
m_modulename = os.path.splitext(m_absfilename)[0]

#print ("Loading C::E scene...");

exported_items = chrono.ImportSolidWorksSystem(m_modulename)



# Add items to the physical system
my_system = chrono.ChSystemNSC()
for my_item in exported_items:
	my_system.Add(my_item)
		
		
# Optionally set some solver parameters.
   
my_system.SetSolverTolerance(1e-9)
my_solver = chrono.ChSolverBB()
my_system.SetSolver(my_solver)
my_solver.SetMaxIterations(150)
my_system.SetTimestepperType(1) # Euler Implicit Projected
#my_solver.EnableWarmStart(True);
my_system.Set_G_acc(chrono.ChVectorD(0,-9.81,0))
chrono.ChCollisionModel_SetDefaultSuggestedEnvelope(0.001)

# Default Material
material = chrono.ChMaterialSurfaceNSC()
material.SetFriction(0.2)
#material.SetDampingF(0.1)
material.SetCompliance(0.00001)

# Tire Material
tire_mat = chrono.ChMaterialSurfaceNSC()
tire_mat.SetFriction(0.8)
#tire_mat.SetDampingF(0.05)
tire_mat.SetCompliance(0.00001)


my_ground = my_system.SearchBody('ground')
my_ground.SetMaterialSurface(tire_mat)

mass=0.0005
bot_numbers = [1,4,5,7,8]   # Thanks stupid naming scheme in Solidworks
wheel_number = [1,2,6,15,8,14,7,12,5,13]
torque_mag = 0.00
nb=5
ni=26
leader=1

# create a path
length=150
st=np.zeros(length)

for i in range(length):
    st[i]=i/10
    
    
ax1=np.zeros(length)
ay1=np.zeros(length)

for i in range(length):
    ax1[i]=st[i]
    ay1[i]=(ax1[i])**(1/2)

path = Path(ax1, ay1)
s = np.arange(0, path.length, 0.1)
goal=[ax1[-1], ay1[-1]]



bots=Robots(nb,bot_numbers,wheel_number,my_system,tire_mat)
interior=interiors(ni,my_system,mass,material)
control=controller(my_system,bots,path,leader,m_timestep)
sim=simulate(m_timestep,my_system,bots,interior,control)

sim.simulate()
(coms_x,coms_z,leader_xs,leader_zs,leader_headings)=control.return_values()

plt.figure(7)
plt.plot(leader_xs, leader_zs,color='b',label=' leader path_traveled')
plt.plot(ax1,ay1,color='g',linestyle='dashed',label='desired_path')
plt.plot(coms_x, coms_z,color='r',label='path_traveled COM')
plt.xlabel("x")
plt.ylabel("y")
plt.grid(True)
plt.title('path of robot')
plt.xlim((-.5,15))
plt.ylim((-1,5))
plt.legend()  
plt.show()


np.savez("3"+".npz",allow_pickle=True,
    coms_x=coms_x,
    coms_z=coms_z,
    leader_xs=leader_xs,
    leader_zs=leader_zs,
    leader_headings=leader_headings)